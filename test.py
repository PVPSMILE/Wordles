# main.py
import os
import random
from collections import Counter
from dotenv import load_dotenv
from telebot import TeleBot, types

# –ü—Ä–æ—Å—Ç—ñ auth-—Ñ—É–Ω–∫—Ü—ñ—ó (–±–µ–∑ —Ö–µ—à—É–≤–∞–Ω–Ω—è)
from auth import create_user, verify_user, bind_telegram_id

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

bot = TeleBot(TOKEN)

# –ë–∞–∑–∞ –∑–∞–≥–∞–¥–æ–∫ (–ø–∞—Ä–∞–º–∏: –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç)
RIDDLES = [
    ("–ß—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å, –Ω–æ –Ω–µ–ª—å–∑—è —Å—ä–µ—Å—Ç—å?", "–∑–∞–¥–∞–Ω–∏–µ"),
    ("–û–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è, –Ω–æ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç. –ß—Ç–æ —ç—Ç–æ?", "—á–∞—Å—ã"),
    ("–ë–µ–∑ –æ–∫–æ–Ω, –±–µ–∑ –¥–≤–µ—Ä–µ–π, –∞ –≤–Ω—É—Ç—Ä–∏ –∂–∏–≤—ë—Ç —Å–≤–µ—Ç. –ß—Ç–æ —ç—Ç–æ?", "–ª–∞–º–ø–æ—á–∫–∞"),
    ("–£ –Ω–µ–≥–æ –µ—Å—Ç—å —ç–∫—Ä–∞–Ω, –∫–Ω–æ–ø–∫–∏ –∏ –≥–æ–ª–æ—Å, –Ω–æ –æ–Ω –Ω–µ —á–µ–ª–æ–≤–µ–∫. –ß—Ç–æ —ç—Ç–æ?", "—Å–º–∞—Ä—Ç—Ñ–æ–Ω"),
    ("–õ–µ—Ç–æ–º –∑–µ–ª—ë–Ω–∞—è, –∑–∏–º–æ–π –¥–æ–º–∞ —Å—Ç–æ–∏—Ç, —É–∫—Ä–∞—à–µ–Ω–Ω–∞—è. –ß—Ç–æ —ç—Ç–æ?", "—ë–ª–∫–∞"),
    ("–í–µ—Å–∏—Ç –º–æ–∂–Ω–æ —Å–∫—É—à–∞—Ç—å", "–≥—Ä—É—à–∞"),
]

# –°–æ—Å—Ç–æ—è–Ω–∏—è
user_state = {}   # chat_id -> {"answer": str, "question": str}
auth_flow = {}    # chat_id -> {"mode": "register"|"login", "step": 1|2, "username": str|None}

# ==== helpers ====
def norm(s: str) -> str:
    return (s or "").lower().replace("—ë", "–µ").replace("‚Äî", "-").replace(" ", "").replace("-", "")

def main_menu_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("–ù–æ–≤–∞—è –∏–≥—Ä–∞"))
    kb.add(types.KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"))
    kb.add(types.KeyboardButton("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"))
    return kb

def auth_menu_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"))
    kb.add(types.KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"))
    kb.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return kb

def cancel_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return kb

def reset_auth(chat_id): auth_flow.pop(chat_id, None)
def reset_game(chat_id): user_state.pop(chat_id, None)

# ==== –∫–æ–º–∞–Ω–¥—ã ====
@bot.message_handler(commands=['start'])
def on_start(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –º–∏–Ω–∏-–∏–≥—Ä–∞ ¬´–°–ª–æ–≤–æ-–∑–∞–≥–∞–¥–∫–∞¬ª.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /new_game ‚Äî –Ω–æ–≤–∞—è –∏–≥—Ä–∞, /cancel ‚Äî –æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è.",
        reply_markup=main_menu_kb()
    )

@bot.message_handler(commands=['new_game'])
def new_game(message):
    chat_id = message.chat.id
    q, a = random.choice(RIDDLES)
    user_state[chat_id] = {"answer": a, "question": q}
    bot.send_message(chat_id, f"–û—Ç–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∫—É:\n\n{q}\n\n(–≤–≤–µ–¥–∏ —Å–ª–æ–≤–æ –æ—Ç–≤–µ—Ç–æ–º)")

@bot.message_handler(commands=['cancel'])
def cmd_cancel(message):
    reset_auth(message.chat.id)
    bot.send_message(message.chat.id, "–û–∫, –æ—Ç–º–µ–Ω–∏–ª —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=main_menu_kb())

# ==== –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ====
@bot.message_handler(func=lambda m: m.text == "–ù–æ–≤–∞—è –∏–≥—Ä–∞")
def on_new_game(message): 
    new_game(message)

@bot.message_handler(func=lambda m: m.text == "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤")
def on_leaderboard(message): 
    leaderboard = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ (—Ç–µ—Å—Ç):\n1. –ò–≥—Ä–æ–∫1 - 10\n2. –ò–≥—Ä–æ–∫2 - 8\n3. –ò–≥—Ä–æ–∫3 - 5"
    bot.send_message(message.chat.id, leaderboard)

@bot.message_handler(func=lambda m: m.text == "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
def on_reg_and_login(message):
    reset_auth(message.chat.id)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=auth_menu_kb())

@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
def back_to_menu(message):
    reset_auth(message.chat.id)
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_kb())

# ==== —Ñ–ª–æ—É –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è / –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ====
@bot.message_handler(func=lambda m: m.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
def reg_start(message):
    chat_id = message.chat.id
    reset_game(chat_id)  # —á—Ç–æ–±—ã –∏–≥—Ä–∞ –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª–∞ –≤–≤–æ–¥
    auth_flow[chat_id] = {"mode": "register", "step": 1, "username": None}
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à username:", reply_markup=cancel_kb())

@bot.message_handler(func=lambda m: m.text == "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
def login_start(message):
    chat_id = message.chat.id
    reset_game(chat_id)  # —á—Ç–æ–±—ã –∏–≥—Ä–∞ –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª–∞ –≤–≤–æ–¥
    auth_flow[chat_id] = {"mode": "login", "step": 1, "username": None}
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à username:", reply_markup=cancel_kb())

@bot.message_handler(func=lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∞")
def on_cancel_btn(message):
    cmd_cancel(message)

@bot.message_handler(func=lambda m: m.chat.id in auth_flow)
def handle_auth(message):
    chat_id = message.chat.id
    st = auth_flow.get(chat_id, {})
    mode = st.get("mode")
    step = st.get("step", 0)
    text = (message.text or "").strip()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: username -> password
    if mode == "register":
        if step == 1:
            st["username"], st["step"] = text, 2
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
            return
        if step == 2:
            try:
                ok, msg = create_user(st["username"], text)
            except Exception as e:
                ok, msg = False, f"–û—à–∏–±–∫–∞ –ë–î: {e}"
            if not ok:
                st["step"] = 1
                bot.send_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å: {msg}\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π username:")
                return
            # –ü—Ä–∏–≤—è–∑–∫–∞ chat_id (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø–æ—ç—Ç–æ–º—É –±–µ–∑ –∂—ë—Å—Ç–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫)
            try:
                bind_telegram_id(st["username"], chat_id)
            except Exception:
                pass
            reset_auth(chat_id)
            bot.send_message(chat_id, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", reply_markup=main_menu_kb())
            return

    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: username -> password
    if mode == "login":
        if step == 1:
            st["username"], st["step"] = text, 2
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
            return
        if step == 2:
            try:
                ok, msg = verify_user(st["username"], text)
            except Exception as e:
                ok, msg = False, f"–û—à–∏–±–∫–∞ –ë–î: {e}"
            if not ok:
                st["step"] = 1
                bot.send_message(chat_id, f"–í—Ö–æ–¥ –Ω–µ—É—Å–ø–µ—à–µ–Ω: {msg}\n–í–≤–µ–¥–∏—Ç–µ username –µ—â—ë —Ä–∞–∑:")
                return
            try:
                bind_telegram_id(st["username"], chat_id)
            except Exception:
                pass
            reset_auth(chat_id)
            bot.send_message(chat_id, "‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!", reply_markup=main_menu_kb())
            return

# ==== –∏–≥—Ä–∞ ====
@bot.message_handler(func=lambda m: (m.chat.id in user_state) and (m.chat.id not in auth_flow))
def handle_guess(message):
    chat_id = message.chat.id
    guess_raw = (message.text or "").strip()
    answer_raw = user_state[chat_id]["answer"]

    guess = norm(guess_raw)
    answer = norm(answer_raw)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã (–ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏)
    if len(guess) != len(answer):
        bot.send_message(chat_id, f"–í —Å–ª–æ–≤–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å {len(answer)} –±—É–∫–≤(—ã). –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë.")
        return

    # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —É–≥–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π + —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    result = []
    misplaced_letters = set()
    wrong_letters = set()
    answer_counter = Counter(answer)

    # –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    for i, ch in enumerate(guess):
        if ch == answer[i]:
            result.append(ch)
            answer_counter[ch] -= 1
        else:
            result.append("_")

    # –ï—Å—Ç—å –≤ —Å–ª–æ–≤–µ, –Ω–æ –Ω–µ –Ω–∞ –º–µ—Å—Ç–µ / –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ
    for i, ch in enumerate(guess):
        if result[i] == "_":
            if answer_counter.get(ch, 0) > 0:
                misplaced_letters.add(ch)
                answer_counter[ch] -= 1
            else:
                wrong_letters.add(ch)

    # –ü–æ–±–µ–¥–∞
    if "".join(result) == answer:
        bot.send_message(chat_id, f"üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ ¬´{answer_raw}¬ª.")
        user_state.pop(chat_id, None)
        bot.send_message(chat_id, "–•–æ—á–µ—à—å –µ—â—ë? –ù–∞–∂–º–∏ /new_game")
        return

    parts = [f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {' '.join(result)}"]
    if misplaced_letters:
        parts.append("–ï—Å—Ç—å, –Ω–æ –Ω–µ –Ω–∞ —Å–≤–æ–∏—Ö –º–µ—Å—Ç–∞—Ö: " + ", ".join(sorted(misplaced_letters)))
    if wrong_letters:
        parts.append("–í–æ–æ–±—â–µ –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ: " + ", ".join(sorted(wrong_letters)))

    bot.send_message(chat_id, "\n".join(parts))
    bot.send_message(chat_id, "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

if __name__ == "__main__":
    bot.polling(none_stop=True, timeout=60)
