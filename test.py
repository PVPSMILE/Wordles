# main.py
import os
import random
from collections import Counter
from telebot import TeleBot, types
from dotenv import load_dotenv

from auth import create_user, verify_user, bind_telegram, get_username_by_chat

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ –≤ .env")

bot = TeleBot(TOKEN, parse_mode="HTML")

# ==== –¢–≤–æ—è –≥—Ä–∞ ¬´—Å–ª–æ–≤–æ-–∑–∞–≥–∞–¥–∫–∞¬ª ====
RIDDLES = [
    ("–ß—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å, –Ω–æ –Ω–µ–ª—å–∑—è —Å—ä–µ—Å—Ç—å?", "–∑–∞–¥–∞–Ω–∏–µ"),
    ("–û–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è, –Ω–æ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç. –ß—Ç–æ —ç—Ç–æ?", "—á–∞—Å—ã"),
    ("–ë–µ–∑ –æ–∫–æ–Ω, –±–µ–∑ –¥–≤–µ—Ä–µ–π, –∞ –≤–Ω—É—Ç—Ä–∏ –∂–∏–≤—ë—Ç —Å–≤–µ—Ç. –ß—Ç–æ —ç—Ç–æ?", "–ª–∞–º–ø–æ—á–∫–∞"),
    ("–£ –Ω–µ–≥–æ –µ—Å—Ç—å —ç–∫—Ä–∞–Ω, –∫–Ω–æ–ø–∫–∏ –∏ –≥–æ–ª–æ—Å, –Ω–æ –æ–Ω –Ω–µ —á–µ–ª–æ–≤–µ–∫. –ß—Ç–æ —ç—Ç–æ?", "—Å–º–∞—Ä—Ç—Ñ–æ–Ω"),
    ("–õ–µ—Ç–æ–º –∑–µ–ª—ë–Ω–∞—è, –∑–∏–º–æ–π –¥–æ–º–∞ —Å—Ç–æ–∏—Ç, —É–∫—Ä–∞—à–µ–Ω–Ω–∞—è. –ß—Ç–æ —ç—Ç–æ?", "—ë–ª–∫–∞"),
    ("–í–µ—Å–∏—Ç –º–æ–∂–Ω–æ —Å–∫—É—à–∞—Ç—å", "–≥—Ä—É—à–∞"),
]

user_state = {}   # chat_id -> {"answer": str, "question": str}
auth_flow  = {}   # chat_id -> {"mode": "register"|"login", "step": 1|2, "username": str}

def norm(s: str) -> str:
    return (
        s.lower()
         .replace("—ë", "–µ")
         .replace("‚Äî", "-")
         .replace(" ", "")
         .replace("-", "")
    )

# ==== –ö–æ–º–∞–Ω–¥–∏ —Å—Ç–∞—Ä—Ç/–º–µ–Ω—é ====
@bot.message_handler(commands=['start'])
def on_start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞")
    markup.add("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤")
    markup.add("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")

    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –º–∏–Ω–∏-–∏–≥—Ä–∞ ¬´–°–ª–æ–≤–æ-–∑–∞–≥–∞–¥–∫–∞¬ª.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:",
        reply_markup=markup
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
@bot.message_handler(func=lambda m: m.text == "–ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞")
def on_quick_game(message):
    new_game(message)  # —Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ —á—Ç–æ –∏ /new_game

@bot.message_handler(func=lambda m: m.text == "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤")
def on_leaderboard(message):
    # –ü–æ–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    leaderboard = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n1. –ò–≤–∞–Ω ‚Äî 5 –ø–æ–±–µ–¥\n2. –ú–∞—Ä–∏—è ‚Äî 3 –ø–æ–±–µ–¥—ã\n3. –û–ª–µ–≥ ‚Äî 2 –ø–æ–±–µ–¥—ã"
    bot.send_message(message.chat.id, leaderboard)

@bot.message_handler(func=lambda m: m.text == "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
def on_auth_register(message):
    bot.send_message(
        message.chat.id,
        "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. üö™\n"
        "–ü–æ–∫–∞ –º–æ–∂–µ—à—å —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç üôÇ"
    )


@bot.message_handler(commands=['new_game'])
def new_game_cmd(message):
    new_game(message)


def new_game(message):
    chat_id = message.chat.id
    q, a = random.choice(RIDDLES)
    user_state[chat_id] = {"answer": a, "question": q}
    bot.send_message(chat_id, f"–û—Ç–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∫—É:\n\n{q}\n\n(–≤–≤–µ–¥–∏ —Å–ª–æ–≤–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é)")

# ==== –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è/–ª–æ–≥—ñ–Ω —è–∫ –æ–∫—Ä–µ–º–∏–π –¥—ñ–∞–ª–æ–≥ ====
@bot.message_handler(commands=['register'])
def register_cmd(message):
    chat_id = message.chat.id
    auth_flow[chat_id] = {"mode": "register", "step": 1}
    bot.send_message(chat_id, "–í–≤–µ–¥–∏ <b>username</b> –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:")

@bot.message_handler(commands=['login'])
def login_cmd(message):
    chat_id = message.chat.id
    auth_flow[chat_id] = {"mode": "login", "step": 1}
    bot.send_message(chat_id, "–í–≤–µ–¥–∏ <b>username</b> –¥–ª—è –≤—Ö–æ–¥—É:")

@bot.message_handler(func=lambda m: m.chat.id in auth_flow)
def handle_auth_flow(message):
    chat_id = message.chat.id
    flow = auth_flow[chat_id]
    mode = flow["mode"]
    step = flow["step"]

    # –ö—Ä–æ–∫ 1: username
    if step == 1:
        flow["username"] = message.text.strip()
        flow["step"] = 2
        bot.send_message(chat_id, "–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ <b>–ø–∞—Ä–æ–ª—å</b>:")
        return

    # –ö—Ä–æ–∫ 2: password -> –≤–∏–∫–ª–∏–∫ —É auth.py
    if step == 2:
        password = message.text.strip()
        username = flow["username"]

        if mode == "register":
            ok, msg = create_user(username, password)
            if ok:
                # –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ ‚Äî –ø—Ä–∏–≤ º—è–∑–∫–∞ Telegram chat_id
                bind_telegram(username, chat_id)
            bot.send_message(chat_id, msg)
        elif mode == "login":
            ok, msg = verify_user(username, password)
            if ok:
                bind_telegram(username, chat_id)
            bot.send_message(chat_id, msg)

        auth_flow.pop(chat_id, None)
        return

# ==== –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —É –≥—Ä—ñ ====
@bot.message_handler(func=lambda m: m.chat.id in user_state)
def handle_guess(message):
    chat_id = message.chat.id
    guess_raw = message.text.strip()
    answer_raw = user_state[chat_id]["answer"]

    guess = norm(guess_raw)
    answer = norm(answer_raw)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏
    if len(guess) != len(answer):
        bot.send_message(chat_id, f"–£ —Å–ª–æ–≤—ñ –º–∞—î –±—É—Ç–∏ {len(answer)} –±—É–∫–≤(–∏). –°–ø—Ä–æ–±—É–π —â–µ.")
        return

    result = []
    correct_letters = set()
    misplaced_letters = set()
    wrong_letters = set()

    from collections import Counter
    answer_counter = Counter(answer)

    # –¢–æ—á–Ω—ñ –∑–±—ñ–≥–∏
    for i, ch in enumerate(guess):
        if ch == answer[i]:
            result.append(ch)
            correct_letters.add(ch)
            answer_counter[ch] -= 1
        else:
            result.append("_")

    # –õ—ñ—Ç–µ—Ä–∏ ¬´—î, –∞–ª–µ –Ω–µ –Ω–∞ –º—ñ—Å—Ü—ñ¬ª
    for i, ch in enumerate(guess):
        if result[i] == "_":
            if answer_counter.get(ch, 0) > 0:
                misplaced_letters.add(ch)
                answer_counter[ch] -= 1
            else:
                wrong_letters.add(ch)

    # –ü–µ—Ä–µ–º–æ–≥–∞
    if "".join(result) == answer:
        bot.send_message(chat_id, f"üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¶–µ ¬´{answer_raw}¬ª.")
        user_state.pop(chat_id, None)
        bot.send_message(chat_id, "–©–µ —Ä–∞–∑? –ù–∞—Ç–∏—Å–Ω–∏ /new_game")
        return

    # –ü—Ä–æ–≥—Ä–µ—Å
    parts = [f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {' '.join(result)}"]
    if misplaced_letters:
        parts.append("–Ñ, –∞–ª–µ –Ω–µ –Ω–∞ —Å–≤–æ—ó—Ö –º—ñ—Å—Ü—è—Ö: " + ", ".join(sorted(misplaced_letters)))
    if wrong_letters:
        parts.append("–í–∑–∞–≥–∞–ª—ñ –Ω–µ–º–∞—î –≤ —Å–ª–æ–≤—ñ: " + ", ".join(sorted(wrong_letters)))

    bot.send_message(chat_id, "\n".join(parts))
    bot.send_message(chat_id, "–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")

if __name__ == "__main__":
    bot.polling(none_stop=True)
