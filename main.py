import random
from telebot import TeleBot, types
from collections import Counter
from dotenv import load_dotenv
import os

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
bot = TeleBot(TOKEN)

# –ë–∞–∑–∞ –∑–∞–≥–∞–¥–æ–∫ (–ø–∞—Ä–∞–º–∏: –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç)
RIDDLES = [
    ("–ß—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å, –Ω–æ –Ω–µ–ª—å–∑—è —Å—ä–µ—Å—Ç—å?", "–∑–∞–¥–∞–Ω–∏–µ"),
    ("–û–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è, –Ω–æ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç. –ß—Ç–æ —ç—Ç–æ?", "—á–∞—Å—ã"),
    ("–ë–µ–∑ –æ–∫–æ–Ω, –±–µ–∑ –¥–≤–µ—Ä–µ–π, –∞ –≤–Ω—É—Ç—Ä–∏ –∂–∏–≤—ë—Ç —Å–≤–µ—Ç. –ß—Ç–æ —ç—Ç–æ?", "–ª–∞–º–ø–æ—á–∫–∞"),
    ("–£ –Ω–µ–≥–æ –µ—Å—Ç—å —ç–∫—Ä–∞–Ω, –∫–Ω–æ–ø–∫–∏ –∏ –≥–æ–ª–æ—Å, –Ω–æ –æ–Ω –Ω–µ —á–µ–ª–æ–≤–µ–∫. –ß—Ç–æ —ç—Ç–æ?", "—Å–º–∞—Ä—Ç—Ñ–æ–Ω"),
    ("–õ–µ—Ç–æ–º –∑–µ–ª—ë–Ω–∞—è, –∑–∏–º–æ–π –¥–æ–º–∞ —Å—Ç–æ–∏—Ç, —É–∫—Ä–∞—à–µ–Ω–Ω–∞—è. –ß—Ç–æ —ç—Ç–æ?", "—ë–ª–∫–∞"),
    ("–í–µ—Å–∏—Ç –º–æ–∂–Ω–æ —Å–∫—É—à–∞—Ç—å", "–≥—Ä—É—à–∞"),
]

user_state = {}  # chat_id -> {"answer": str, "question": str}
auth_flow = {} 

def norm(s: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —á–µ—Å—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
    return (
        s.lower()
         .replace("—ë", "–µ")
         .replace("‚Äî", "-")
         .replace(" ", "")
         .replace("-", "")
    )

@bot.message_handler(commands=['start'])
def on_start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ù–æ–≤–∞—è –∏–≥—Ä–∞"))
    markup.add(types.KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"))
    markup.add(types.KeyboardButton("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"))
    
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –º–∏–Ω–∏-–∏–≥—Ä–∞ ¬´–°–ª–æ–≤–æ-–∑–∞–≥–∞–¥–∫–∞¬ª.\n"
        "–Ø –∑–∞–≥–∞–¥—ã–≤–∞—é —Å–ª–æ–≤–æ ‚Äî —Ç—ã –≤–≤–æ–¥–∏—à—å –æ—Ç–≤–µ—Ç —Ç–µ–º –∂–µ —Å–ª–æ–≤–æ–º.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /new_game ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.", reply_markup=markup 
    )
    new_game(message)

@bot.message_handler(func=lambda message: message.text == "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤")
def on_leaderboard(message): 
    leaderboard = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ):\n1. –ò–≥—Ä–æ–∫1 - 10 –æ—á–∫–æ–≤\n2. –ò–≥—Ä–æ–∫2 - 8 –æ—á–∫–æ–≤\n3. –ò–≥—Ä–æ–∫3 - 5 –æ—á–∫–æ–≤"
    bot.send_message(message.chat.id, leaderboard)

@bot.message_handler(func=lambda message: message.text == "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
def on_reg_and_login(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"))
    markup.add(types.KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
def on_reg(message): 
    chat_id = message.chat.id
    auth_flow[chat_id] = {"mode": "login", "step": 1, "username": None}
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à username:")
    

@bot.message_handler(func=lambda message: message.text == "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
def on_login(message):
    pass
    
@bot.message_handler(func=lambda message: message.text == "–ù–æ–≤–∞—è –∏–≥—Ä–∞")
def on_new_game(message): 
    new_game(message)
    
@bot.message_handler(commands=['new_game'])
def new_game(message):
    chat_id = message.chat.id
    q, a = random.choice(RIDDLES)
    user_state[chat_id] = {"answer": a, "question": q}
    bot.send_message(chat_id, f"–û—Ç–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∫—É:\n\n{q}\n\n(–≤–≤–µ–¥–∏ —Å–ª–æ–≤–æ –æ—Ç–≤–µ—Ç–æ–º)")

@bot.message_handler(func=lambda m: m.chat.id in user_state)
def handle_guess(message):
    chat_id = message.chat.id
    guess_raw = message.text.strip()
    answer_raw = user_state[chat_id]["answer"]

    guess = norm(guess_raw)
    answer = norm(answer_raw)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã (–ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏)
    if len(guess) != len(answer):
        bot.send_message(chat_id, f"–í —Å–ª–æ–≤–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å {len(answer)} –±—É–∫–≤(—ã). –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë.")
        return

    # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —É–≥–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π + —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    result = []
    correct_letters = set()
    misplaced_letters = set()
    wrong_letters = set()

    # –ü–æ–¥—Å—á—ë—Ç —á–∞—Å—Ç–æ—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π ¬´misplaced¬ª –ª–æ–≥–∏–∫–∏
    answer_counter = Counter(answer)

    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç–∏–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏ –≤—ã—á—Ç–µ–º –∏—Ö –∏–∑ —á–∞—Å—Ç–æ—Ç
    for i, ch in enumerate(guess):
        if ch == answer[i]:
            result.append(ch)
            correct_letters.add(ch)
            answer_counter[ch] -= 1
        else:
            result.append("_")

    # –ó–∞—Ç–µ–º –æ—Ç–º–µ—Ç–∏–º ¬´–Ω–∞ –º–µ—Å—Ç–µ/–Ω–µ –Ω–∞ –º–µ—Å—Ç–µ¬ª
    for i, ch in enumerate(guess):
        if result[i] == "_":
            if answer_counter.get(ch, 0) > 0:
                misplaced_letters.add(ch)
                answer_counter[ch] -= 1
            else:
                wrong_letters.add(ch)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
    if "".join(result) == answer:
        bot.send_message(chat_id, f"üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ ¬´{answer_raw}¬ª.")
        # –°–±—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        user_state.pop(chat_id, None)
        bot.send_message(chat_id, "–•–æ—á–µ—à—å –µ—â—ë? –ù–∞–∂–º–∏ /new_game")
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    parts = [f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {' '.join(result)}"]
    if misplaced_letters:
        parts.append("–ï—Å—Ç—å, –Ω–æ –Ω–µ –Ω–∞ —Å–≤–æ–∏—Ö –º–µ—Å—Ç–∞—Ö: " + ", ".join(sorted(misplaced_letters)))
    if wrong_letters:
        parts.append("–í–æ–æ–±—â–µ –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ: " + ", ".join(sorted(wrong_letters)))

    bot.send_message(chat_id, "\n".join(parts))
    bot.send_message(chat_id, "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

bot.polling(none_stop=True)